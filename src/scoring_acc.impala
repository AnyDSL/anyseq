fn get_linmem_iteration_acc_device(column: Vector, row: Vector, corners: Vector) -> fn(Index, Index, Index, Index, bool, IterationInfo) -> ScoringMatrixAcc{

    |offset_i, offset_j, height, width, _, it| -> ScoringMatrixAcc{

        let tid = it.tid_x;
        let block_j = offset_j / BLOCK_WIDTH;
       
        let lines = reserve_shared[Score]((BLOCK_WIDTH + 1) * 3);
        
        let lin_acc = get_rotation_acc(read_matrix_shared(lines), write_matrix_shared(lines), BLOCK_WIDTH);

        let col_acc = get_vector_acc_offset(read_vector(column), write_vector(column), offset_i);
        let row_acc = get_vector_acc_offset(read_vector(row), write_vector(row), offset_j);
        let cor_acc = get_vector_acc(read_vector(corners), write_vector(corners));

        lin_acc.write_lower(tid, row_acc.read(tid));
        lin_acc.write_middle(tid,row_acc.read(tid));
        lin_acc.write_upper(tid, row_acc.read(tid));

        if tid == 1 {
            //write corner value to position -1
            lin_acc.write_middle(-1, cor_acc.read(block_j - 1));
            //update corner value
            cor_acc.write(block_j - 1, col_acc.read(BLOCK_HEIGHT - 1));
        }

        ScoringMatrixAcc{
            read_no_gap: |_, j| lin_acc.read_middle(j - 1),
            read_gap_q:  |_, j| lin_acc.read_lower(j - 1),
            read_gap_s:  |_, j| lin_acc.read_lower(j),
            write:       |i, j, score| {
                lin_acc.write_upper(j, score);
                if i == height - 1 { row_acc.write(j, score); }
                if j == width - 1 { col_acc.write(i, score); }

            },
            update_begin_line: |i| {
                if tid == 0 && i < BLOCK_HEIGHT { lin_acc.write_lower(-1, col_acc.read(i)); }
            },
            update_end_line: |_| {
                lin_acc.rotate(); 
            },
            block_end: || {}
        }
    }
}

fn get_local_max_vector_size_device(matrix_width: Index) -> Index { matrix_width }

fn get_local_linmem_iteration_acc_device(score_matrix: ScoringMatrix, max_scores: Vector, max_pos_i: Vector, max_pos_j: Vector) -> fn(Index, Index, Index, Index, bool, IterationInfo) -> ScoringMatrixAcc{

    |offset_i, offset_j, height, width, is_left_half, it| {
        
        let mat_acc = score_matrix.get_iteration_acc(offset_i, offset_j, height, width, is_left_half, it);

        let mut max_score_thread = SCORE_MIN_VALUE;
        let mut max_pos_thread   = (0, 0);

        let write = |i, j, score| {
            mat_acc.write(i, j, score);
            if i < height && score > max_score_thread {
                max_score_thread = score;
                max_pos_thread = (i, j);
            }
        };
    
        let block_end = || {
        
            mat_acc.block_end();

            let max_sco_acc   = get_vector_acc(read_vector(max_scores), write_vector(max_scores));
            let max_pos_i_acc = get_vector_acc(read_vector(max_pos_i),  write_vector(max_pos_i) );
            let max_pos_j_acc = get_vector_acc(read_vector(max_pos_j),  write_vector(max_pos_j) );

            let index = offset_j + it.tid_x;
            
            let prev_max = max_sco_acc.read(index);
            
            if max_score_thread > prev_max {
                max_sco_acc.write(index, max_score_thread);
                max_pos_i_acc.write(index, max_pos_thread(0) + offset_i);
                max_pos_j_acc.write(index, max_pos_thread(1) + offset_j);
            }
        };

        ScoringMatrixAcc{
            read_no_gap:       mat_acc.read_no_gap,
            read_gap_q:        mat_acc.read_gap_q,
            read_gap_s:        mat_acc.read_gap_s,
            write:             write,
            update_begin_line: mat_acc.update_begin_line,
            update_end_line:   mat_acc.update_end_line,
            block_end:         block_end
        }
    }
}

fn get_iteration_acc_hb_device(column_left: Vector, column_right: Vector, row: Vector, corners: Vector, block_width: Index) -> fn(Index, Index, Index, Index, bool, IterationInfo) -> ScoringMatrixAcc{

    |offset_i, offset_j, height, width, is_left_half, it| -> ScoringMatrixAcc{

        let tid = it.tid_x;
        let block_j = offset_j / block_width;

        let column = if is_left_half { column_left } else { column_right };    
       
        let lines = reserve_shared[Score]((BLOCK_WIDTH + 1) * 3);
        
        let lin_acc = get_rotation_acc(read_matrix_shared(lines), write_matrix_shared(lines), BLOCK_WIDTH);

        let col_acc = get_vector_acc_offset(read_vector(column), write_vector(column), offset_i);
        let row_acc = get_vector_acc_offset(read_vector(row), write_vector(row), offset_j);
        let cor_acc = get_vector_acc(read_vector(corners), write_vector(corners));
        
        lin_acc.write_lower(tid, row_acc.read(tid));
        lin_acc.write_middle(tid,row_acc.read(tid));
        lin_acc.write_upper(tid, row_acc.read(tid));

        if tid == 1 {
            //write corner value to position -1
            lin_acc.write_middle(-1, cor_acc.read(block_j - 1));
            //update corner value
            cor_acc.write(block_j - 1, col_acc.read(BLOCK_HEIGHT - 1));
        }

        ScoringMatrixAcc{
            read_no_gap: |_, j| lin_acc.read_middle(j - 1),
            read_gap_q:  |_, j| lin_acc.read_lower(j - 1),
            read_gap_s:  |_, j| lin_acc.read_lower(j),
            write:       |i, j, score| {
                lin_acc.write_upper(j, score);
                if i == height - 1 { row_acc.write(j, score); }
                if j == width - 1 { col_acc.write(i, score); }

            },
            update_begin_line: |i| {
                if tid == 0 && i < BLOCK_HEIGHT { lin_acc.write_lower(-1, col_acc.read(i)); }
            },
            update_end_line: |_| {
                lin_acc.rotate(); 
            },
            block_end: || {}
        }
    }
}

fn get_iteration_acc_tb_device(block_width: Index, init_scores: InitScoresFn) -> fn(Index, Index, Index, Index, bool, IterationInfo) -> ScoringMatrixAcc{

    |offset_i, offset_j, height, width, is_left_half, it| -> ScoringMatrixAcc{

        let tid = it.tid_x;     
       
        let lines = reserve_shared[Score]((BLOCK_WIDTH + 1) * 3);
        
        let lin_acc = get_rotation_acc(read_matrix_shared(lines), write_matrix_shared(lines), block_width);

        lin_acc.write_lower(tid, init_scores(tid));
        lin_acc.write_middle(tid, init_scores(tid));
        lin_acc.write_upper(tid, init_scores(tid));

        if tid == 1 {
            lin_acc.write_middle(-1, init_scores(-1));
        }

        ScoringMatrixAcc{
            read_no_gap: |_, j| lin_acc.read_middle(j - 1),
            read_gap_q:  |_, j| lin_acc.read_lower(j - 1),
            read_gap_s:  |_, j| lin_acc.read_lower(j),
            write:       |i, j, score| lin_acc.write_upper(j, score),

            update_begin_line: |i| {
                if tid == 0 && i < height { lin_acc.write_lower(-1, init_scores(i)); }
            },
            update_end_line: |_| {
                lin_acc.rotate(); 
            },
            block_end: || {}
        }
    }
}

