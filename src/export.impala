//-------------------------------------------------------------------
// global alignments
//-------------------------------------------------------------------
extern 
fn global_alignment_score(
    query: &[u8], len_q: Index, 
    subject: &[u8], len_s: Index, 
    alQuery: &[u8], alSubject: &[u8]) -> Score
{
    let qry_seq = wrap_sequence(query, len_q);
    let sub_seq = wrap_sequence(subject, len_s);

    alignment_score(qry_seq, sub_seq, 
                    global_scheme( linear_scoring(2,-1,-1)) )
}


extern 
fn construct_global_alignment(
    query: &[u8], len_q: Index, 
    subject: &[u8], len_s: Index, 
    alQuery: &[u8], alSubject: &[u8]) -> Score
{

    let qry_seq = wrap_sequence(query, len_q);
    let sub_seq = wrap_sequence(subject, len_s);

    let qry_out = wrap_sequence(alQuery, len_q+len_s);
    let sub_out = wrap_sequence(alSubject, len_q+len_s);

    alignment_tb(qry_seq, sub_seq, 
                 qry_out, sub_out,
                 global_scheme( linear_scoring(2,-1,-1)) )
}


extern 
fn construct_global_alignment_fulltb(
    query: &[u8], len_q: Index, 
    subject: &[u8], len_s: Index, 
    alQuery: &[u8], alSubject: &[u8]) -> Score
{

    let qry_seq = wrap_sequence(query, len_q);
    let sub_seq = wrap_sequence(subject, len_s);
    
    let qry_out = wrap_sequence(alQuery, len_q+len_s);
    let sub_out = wrap_sequence(alSubject, len_q+len_s);

    alignment_fulltb(qry_seq, sub_seq, 
                     qry_out, sub_out,
                     global_scheme( linear_scoring(2,-1,-1)) )
}



//-------------------------------------------------------------------
// semi-global alignments
//-------------------------------------------------------------------
extern 
fn semiglobal_alignment_score(
    query: &[u8], len_q: Index, 
    subject: &[u8], len_s: Index, 
    alQuery: &[u8], alSubject: &[u8]) -> Score
{
    let qry_seq = wrap_sequence(query, len_q);
    let sub_seq = wrap_sequence(subject, len_s);

    alignment_score(qry_seq, sub_seq, 
                    semiglobal_scheme( linear_scoring(2,-1,-1)) )
}


extern 
fn construct_semiglobal_alignment(
    query: &[u8], len_q: Index, 
    subject: &[u8], len_s: Index, 
    alQuery: &[u8], alSubject: &[u8]) -> Score
{

    let qry_seq = wrap_sequence(query, len_q);
    let sub_seq = wrap_sequence(subject, len_s);

    let qry_out = wrap_sequence(alQuery, len_q+len_s);
    let sub_out = wrap_sequence(alSubject, len_q+len_s);

    alignment_tb(qry_seq, sub_seq, 
                 qry_out, sub_out,
                 semiglobal_scheme( linear_scoring(2,-1,-1)) )
}


extern 
fn construct_semiglobal_alignment_fulltb(
    query: &[u8], len_q: Index, 
    subject: &[u8], len_s: Index, 
    alQuery: &[u8], alSubject: &[u8]) -> Score
{

    let qry_seq = wrap_sequence(query, len_q);
    let sub_seq = wrap_sequence(subject, len_s);
    
    let qry_out = wrap_sequence(alQuery, len_q+len_s);
    let sub_out = wrap_sequence(alSubject, len_q+len_s);

    alignment_fulltb(qry_seq, sub_seq, 
                     qry_out, sub_out,
                     global_scheme( linear_scoring(2,-1,-1)) )
}



//-------------------------------------------------------------------
// local alignments
//-------------------------------------------------------------------
extern 
fn local_alignment_score(
    query: &[u8], len_q: Index, 
    subject: &[u8], len_s: Index, 
    alQuery: &[u8], alSubject: &[u8]) -> Score
{
    let qry_seq = wrap_sequence(query, len_q);
    let sub_seq = wrap_sequence(subject, len_s);

    alignment_score(qry_seq, sub_seq, 
                    local_scheme( linear_scoring(2,-1,-1)) )
}


extern 
fn construct_local_alignment(
    query: &[u8], len_q: Index, 
    subject: &[u8], len_s: Index, 
    alQuery: &[u8], alSubject: &[u8]) -> Score
{

    let qry_seq = wrap_sequence(query, len_q);
    let sub_seq = wrap_sequence(subject, len_s);

    let qry_out = wrap_sequence(alQuery, len_q+len_s);
    let sub_out = wrap_sequence(alSubject, len_q+len_s);

    alignment_tb(qry_seq, sub_seq, 
                 qry_out, sub_out,
                 local_scheme( linear_scoring(2,-1,-1)) )

}


extern 
fn construct_local_alignment_fulltb(
    query: &[u8], len_q: Index, 
    subject: &[u8], len_s: Index, 
    alQuery: &[u8], alSubject: &[u8]) -> Score
{

    let qry_seq = wrap_sequence(query, len_q);
    let sub_seq = wrap_sequence(subject, len_s);
    
    let qry_out = wrap_sequence(alQuery, len_q+len_s);
    let sub_out = wrap_sequence(alSubject, len_q+len_s);

    alignment_fulltb(qry_seq, sub_seq, 
                     qry_out, sub_out,
                     global_scheme( linear_scoring(2,-1,-1)) )
}


