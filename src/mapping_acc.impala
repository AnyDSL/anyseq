
fn sequences_to_device(query_cpu: Sequence, subject_cpu: Sequence, body: fn(Sequence, Sequence) -> ()) -> (){
    
    let acc = accelerator(device_id);

    let query_gpu = alloc_sequence(query_cpu, get_padding_h(), acc.alloc);
    copy_sequence(query_cpu, query_gpu);

    let subject_gpu = alloc_sequence(subject_cpu, get_padding_w(), acc.alloc);
    copy_sequence(subject_cpu, subject_gpu);

    body(query_gpu, subject_gpu);
  
    release(query_gpu.buf);
    release(subject_gpu.buf);   
}

fn sequence_to_shared(tid: Index, seq: Sequence, length: Index, seq_acc: SequenceAcc) -> SequenceAcc {
    
    let seq_shared = reserve_shared[SequenceElem](length);
    let seq_acc_sh = get_sequence_acc(read_sequence_shared(seq_shared), write_sequence_shared(seq_shared));

    for s in unroll(0, length / BLOCK_WIDTH){
        let i = s * BLOCK_WIDTH + tid;
        seq_acc_sh.write(i, seq_acc.read(i));
    }
    seq_acc_sh
}

fn read_matrix(matrix: Matrix) -> ReadMatrixFn { |idx| bitcast[&[1][MatrixElem]](matrix.buf.data)(idx) }
fn write_matrix(matrix: Matrix) -> WriteMatrixFn { |idx, val| bitcast[&mut[1][MatrixElem]](matrix.buf.data)(idx) = val }

fn read_vector(vector: Vector) -> ReadMatrixFn { |idx| bitcast[&[1][MatrixElem]](vector.buf.data)(idx) }
fn write_vector(vector: Vector) -> WriteMatrixFn { |idx, val| bitcast[&mut[1][MatrixElem]](vector.buf.data)(idx) = val }

fn read_matrix_s(matrix: MatrixS) -> ReadMatrixSFn { |idx| bitcast[&[1][MatrixSElem]](matrix.buf.data)(idx) }
fn write_matrix_s(matrix: MatrixS) -> WriteMatrixSFn { |idx, val| bitcast[&mut[1][MatrixSElem]](matrix.buf.data)(idx) = val }

fn read_sequence(sequence: Sequence) -> ReadSequenceFn { |idx| bitcast[&[1][SequenceElem]](sequence.buf.data)(idx) }
fn write_sequence(sequence: Sequence) -> WriteSequenceFn { |idx, val| bitcast[&mut[1][SequenceElem]](sequence.buf.data)(idx) = val }

fn read_sequence_shared(data: &[3][SequenceElem]) -> ReadSequenceFn { |idx| data(idx) }
fn write_sequence_shared(data: &mut[3][SequenceElem]) -> WriteSequenceFn { |idx, val| data(idx) = val }

fn read_matrix_shared(data: &[3][MatrixElem]) -> ReadMatrixFn { |idx| data(idx) }
fn write_matrix_shared(data: &mut[3][MatrixElem]) -> WriteMatrixFn { |idx, val| data(idx) = val }

fn get_padding_h() -> Index {BLOCK_HEIGHT};
fn get_padding_w() -> Index {BLOCK_WIDTH};

fn make_matrix_acc_cpu(matrix: Matrix) -> MatrixAcc{
    make_matrix_acc(matrix, read_matrix_cpu(matrix), write_matrix_cpu(matrix))
}

fn make_matrix_acc(matrix: Matrix, read: ReadMatrixFn, write: WriteMatrixFn) -> MatrixAcc{
    make_matrix_acc_offset(matrix, read, write, 0, 0)
}

fn make_matrix_acc_offset(matrix: Matrix, read: ReadMatrixFn, write: WriteMatrixFn, oi: Index, oj: Index) -> MatrixAcc{
    make_matrix_acc_coal_offset(matrix, read, write, oi, oj)
}

fn get_matrix_s_acc_cpu(matrix: MatrixS) -> MatrixSAcc{
    get_matrix_s_acc(matrix, read_matrix_s_cpu(matrix), write_matrix_s_cpu(matrix))
}

fn get_matrix_s_acc(matrix: MatrixS, read: ReadMatrixSFn, write: WriteMatrixSFn) -> MatrixSAcc{
    get_matrix_s_acc_offset(matrix, read, write, 0, 0)
}

fn get_matrix_s_acc_offset(matrix: MatrixS, read: ReadMatrixSFn, write: WriteMatrixSFn, oi: Index, oj: Index) -> MatrixSAcc{
    get_matrix_s_acc_coal_offset(matrix, read, write, oi, oj)
}


fn alloc_device(size: Index) -> Buffer{
    let acc = accelerator(device_id);
    acc.alloc(size)
}

fn release_dev(buf: Buffer) -> () {
    release(buf);
}

fn get_matrix_entry_cpu(device_matrix: Matrix, i: Index, j: Index) -> MatrixElem{
    let temp = alloc_matrix(device_matrix, alloc_cpu);
    copy_matrix(device_matrix, temp);
    let entry = make_matrix_acc_cpu(temp).read(i, j);
    release(temp.buf);
    entry
}

fn get_vector_entry_cpu(device_vector: Vector, i: Index) -> MatrixElem{
    let temp = create_vector(1, 0, alloc_cpu);
    copy_vector_offset(device_vector, i, temp, 0, 1);
    let entry = get_vector_acc_cpu(temp).read(0);
    release(temp.buf);
    entry
}

fn get_vector_cpu(device_vector: Vector) -> Vector{
    let vector_cpu = alloc_vector(device_vector, alloc_cpu);
    copy_vector(device_vector, vector_cpu);
    vector_cpu
}

fn vector_to_device(vector_cpu: Vector, device_vector: Vector) -> () {
    copy_vector(vector_cpu, device_vector);
    release(vector_cpu.buf);
}

fn get_matrix_s_cpu(device_matrix: MatrixS) -> MatrixS{
       let matrix_cpu = alloc_matrix_s(device_matrix, alloc_cpu);
       copy_matrix_s(device_matrix, matrix_cpu);
       matrix_cpu

}

fn get_sequence_cpu(device_sequence: Sequence) -> Sequence{
    let sequence_cpu = alloc_sequence(device_sequence, 0, alloc_cpu);
    copy_sequence(device_sequence, sequence_cpu);
    sequence_cpu
}

fn sequence_to_device(sequence_cpu: Sequence, pad: Index) -> Sequence {

    let sequence_gpu = alloc_sequence(sequence_cpu, pad, alloc_device);
    copy_sequence(sequence_cpu, sequence_gpu);

    sequence_gpu
}

fn get_traceback_acc(block_width: Index, predc: MatrixS, scheme: AlignmentScheme) -> fn(Index, Index, Index, Index, IterationInfo) -> PredecessorMatrixAcc{
    |offset_i, offset_j, height, width,  it| -> PredecessorMatrixAcc{

        let predc_offset_i = offset_i + it.bid_x;
        let pre_acc = get_matrix_s_acc_offset(predc, read_matrix_s(predc), write_matrix_s(predc), predc_offset_i, 0);

        let tid = it.tid_x;

        if tid < width {
            pre_acc.write(-1, tid, scheme.init_predc_cols(tid));
        }
        
        for i in range_step(tid - 1, height, block_width){
            pre_acc.write(i, -1, scheme.init_predc_rows(i));
        }

        PredecessorMatrixAcc{
            write:     |i, j, val| pre_acc.write(i, j, val),
        }
    }
}

