struct Splits{
    get_part_dimensions: fn(Index) -> (Index, Index),
    set_split_position:  fn(Index, Index) -> (),
    halve_part_width:    fn() -> (),
    get_splits_vector:   fn() -> Vector,
    release:             fn() -> ()
}

fn create_splits(query_length: Index, subject_length: Index, part_width: Index, min_block_width: Index) -> Splits{

    let num_blocks = round_up_div(subject_length, min_block_width);
    let splits_vec = create_vector(num_blocks, 0, alloc_device);
    let spl_acc = get_vector_acc(read_vector(splits_vec), write_vector(splits_vec));

    let mut blocks_per_part = part_width / min_block_width;

    //initialize splits
    for i, spl_acc in iteration_vector_1d(splits_vec, 2){
        if i < 2 { spl_acc.write(i * num_blocks - 1, i * query_length); }
    }

    let get_part_dimensions = |part| {
        let start_index = part * blocks_per_part - 1;
        let end_index   = min((part + 1) * blocks_per_part - 1, num_blocks - 1);
        let offset      = spl_acc.read(start_index);
        let height      = spl_acc.read(end_index) - offset;
        (offset, height)
    };

    let set_split_position = |part, position| {
        let index = part * blocks_per_part + blocks_per_part / 2 - 1;
        spl_acc.write(index, position);
    };

    Splits{
        get_part_dimensions:    get_part_dimensions,
        set_split_position:     set_split_position,
        halve_part_width:    || blocks_per_part /= 2,
        get_splits_vector:   || splits_vec,
        release:             || release(splits_vec.buf)
    }
}

fn hb_sum(column_left: Vector, column_right: Vector, splits: Splits, query_length: Index, subject_length: Index, half_width: Index, parts: Index, scheme: AlignmentScheme) -> Index{

    let block_width = min(BLOCK_WIDTH, half_width * 2);
    let blocks_per_part = half_width * 2 / block_width;  
    
    let block_max = create_vector(parts * blocks_per_part, 0, alloc_device);
    let block_ind = create_vector(parts * blocks_per_part, 0, alloc_device);

    let blo_max_acc = get_vector_acc(read_vector(block_max), write_vector(block_max));
    let blo_ind_acc = get_vector_acc(read_vector(block_ind), write_vector(block_ind));
    
    //find maximum blockwise
    for block in iteration_1d(parts * blocks_per_part){
        if block < parts * blocks_per_part {
            let part       = block / blocks_per_part;
            let part_block = block % blocks_per_part;

            let (part_offset, length) = splits.get_part_dimensions(part);

            let mut max   = SCORE_MIN_VALUE;
            let mut index = -1;

            let col_lef_acc = get_vector_acc_offset(read_vector(column_left), write_vector(column_left), part_offset);
            let col_rig_acc = get_vector_acc_offset(read_vector(column_right), write_vector(column_right), part_offset);

            if part_block == 0 && length > 0{
                let left_half_width  = half_width;
                let right_half_width = min(half_width, subject_length - (part * 2 + 1) * half_width);
                
                //value at position -1
                max = scheme.init_scores(left_half_width - 1) + col_rig_acc.read(length - 1);
                index = -1;

                //value at position length - 1
                let last_val = col_lef_acc.read(length - 1) + scheme.init_scores(right_half_width -1);
                if last_val > max {
                    max = last_val;
                    index = length - 1;
                }
            }

            for i in range_step(part_block, length - 1, blocks_per_part){
                let val = col_lef_acc.read(i) + col_rig_acc.read(length - i - 2);

                if val > max {
                    max = val;
                    index = i;
                }
            }
            blo_max_acc.write(block, max);
            blo_ind_acc.write(block, index);
        }
    }

    let heights = create_vector(parts * 2 + 1, 0, alloc_device);
    let hei_acc = get_vector_acc(read_vector(heights), write_vector(heights));
    
    //find maximum partwise
    for part in iteration_1d(parts){
        if part < parts {
            let block_offset = part * blocks_per_part;
            let (offset_i, height) = splits.get_part_dimensions(part);

            let mut max   = blo_max_acc.read(block_offset);
            let mut index = blo_ind_acc.read(block_offset);

            for i in range(1, blocks_per_part){
                let val = blo_max_acc.read(block_offset + i);
                if val > max{
                    max = val;
                    index = blo_ind_acc.read(block_offset + i);
                }
            }

            splits.set_split_position(part, offset_i + index + 1);
            hei_acc.write(part * 2, index + 1);
            hei_acc.write(part * 2 + 1, height - index - 1);

            if part == parts -1 {
                hei_acc.write(parts * 2, query_length - (offset_i + height));
            }
        }
    }

    let (max_height, _) = reduce_max(heights, 0, heights.length);

    release(block_max.buf);
    release(block_ind.buf);
    release(heights.buf);

    max_height
}

fn get_sequence_acc_half(sequence: Sequence, half_offset: Index, half_size: Index, half_block: Index, block_size: Index, is_left_half: bool) -> SequenceAcc {
    let offset = if is_left_half {
        half_offset + half_block * block_size 
    } else { 
        half_offset + half_size - half_block * block_size - 1
    };

    if is_left_half{
        return( get_sequence_acc_offset(read_sequence(sequence), write_sequence(sequence), offset) )
    }
    get_sequence_acc_offset_reversed(read_sequence(sequence), write_sequence(sequence), offset)
}
