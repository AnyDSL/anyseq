// ----------------------------------------------------------------------------
// fundamental accessor functions
// ----------------------------------------------------------------------------
fn read_sequence(sequence: Sequence) -> ReadSequenceFn  { 
    |idx| bitcast[&[1][Char]](sequence.buf.data)(idx) 
}
fn write_sequence(sequence: Sequence) -> WriteSequenceFn {
    |idx, val| bitcast[&mut[1][Char]](sequence.buf.data)(idx) = val 
}


// ------------------------------------------------------------------
fn read_matrix(matrix: Matrix) -> MatrixReadFn  { 
    |idx| bitcast[&[1][Score32]](matrix.buf.data)(idx) 
}
fn write_matrix(matrix: Matrix) -> MatrixWriteFn { 
    |idx, val| bitcast[&mut[1][Score32]](matrix.buf.data)(idx) = val 
}

fn read_matrix16(matrix: Matrix16) -> Matrix16ReadFn  {
    |idx| bitcast[&[1][Score16]](matrix.buf.data)(idx) 
}
fn write_matrix16(matrix: Matrix16) -> Matrix16WriteFn { 
    |idx, val| bitcast[&mut[1][Score16]](matrix.buf.data)(idx) = val
}

fn read_matrix8(matrix: Matrix8) -> Matrix8ReadFn  { 
    |idx| bitcast[&[1][Score8]](matrix.buf.data)(idx) 
}
fn write_matrix8(matrix: Matrix8) -> Matrix8WriteFn { 
    |idx, val| bitcast[&mut[1][Score8]](matrix.buf.data)(idx) = val
}


// ------------------------------------------------------------------
fn read_vector(vector: Vector)  -> MatrixReadFn {
    |idx| bitcast[&[1][Score32]](vector.buf.data)(idx) 
}
fn write_vector(vector: Vector) -> MatrixWriteFn { 
    |idx, val| bitcast[&mut[1][Score32]](vector.buf.data)(idx) = val 
}


// ------------------------------------------------------------------
// shared memory access
// ------------------------------------------------------------------
fn read_sequence_shared(data: &[3][Char]) -> ReadSequenceFn  { 
    |idx| data(idx) 
}
fn write_sequence_shared(data: &mut[3][Char]) -> WriteSequenceFn {
    |idx, val| data(idx) = val 
}

fn read_matrix16_shared(data: &[3][Score32]) -> MatrixReadFn  {
    |idx| data(idx)
}
fn write_matrix16_shared(data: &mut[3][Score32]) -> MatrixWriteFn {
    |idx, val| data(idx) = val
}

fn read_matrix8_shared(data: &[3][Score32]) -> MatrixReadFn  {
    |idx| data(idx) 
}
fn write_matrix8_shared(data: &mut[3][Score32]) -> MatrixWriteFn { 
    |idx, val| data(idx) = val 
}



// ----------------------------------------------------------------------------
fn alloc_device(size: Index) -> Buffer{
    let acc = accelerator(device_id);
    acc.alloc(size)
}

fn release_device(buf: Buffer) -> () {
    release(buf);
}


// ----------------------------------------------------------------------------
fn padding_h() -> Index {BLOCK_HEIGHT};
fn padding_w() -> Index {BLOCK_WIDTH};


// ----------------------------------------------------------------------------
fn sequences_to_device(query_cpu: Sequence, subject_cpu: Sequence, body: fn(Sequence, Sequence) -> ()) -> (){
    
    let acc = accelerator(device_id);

    let query_gpu = alloc_sequence(query_cpu, padding_h(), acc.alloc);
    copy_sequence(query_cpu, query_gpu);

    let subject_gpu = alloc_sequence(subject_cpu, padding_w(), acc.alloc);
    copy_sequence(subject_cpu, subject_gpu);

    body(query_gpu, subject_gpu);
  
    release(query_gpu.buf);
    release(subject_gpu.buf);   
}


// ------------------------------------------------------------------
fn sequence_to_device(sequence_cpu: Sequence, pad: Index) -> Sequence {

    let sequence_gpu = alloc_sequence(sequence_cpu, pad, alloc_device);
    copy_sequence(sequence_cpu, sequence_gpu);

    sequence_gpu
}


// ------------------------------------------------------------------
fn sequence_to_shared(tid: Index, seq: Sequence, length: Index, sview: SequenceView) -> SequenceView {
    
    let seq_shared = reserve_shared[Char](length);
    let seq_view = view_sequence(read_sequence_shared(seq_shared), write_sequence_shared(seq_shared));

    for s in unroll(0, length / BLOCK_WIDTH){
        let i = s * BLOCK_WIDTH + tid;
        seq_view.write(i, sview.read(i));
    }
    seq_view
}


fn sequence_cpu(device_sequence: Sequence) -> Sequence {
    let sequence_cpu = alloc_sequence(device_sequence, 0, alloc_cpu);
    copy_sequence(device_sequence, sequence_cpu);
    sequence_cpu
}


// ----------------------------------------------------------------------------
fn view_matrix_cpu(matrix: Matrix) -> MatrixView{
    view_matrix(matrix, read_matrix_cpu(matrix), write_matrix_cpu(matrix))
}

fn view_matrix(matrix: Matrix, read: MatrixReadFn, write: MatrixWriteFn) -> MatrixView{
    view_matrix_offset(matrix, read, write, 0, 0)
}

fn view_matrix_offset(matrix: Matrix, read: MatrixReadFn, write: MatrixWriteFn, oi: Index, oj: Index) -> MatrixView{
    view_matrix_coal_offset(matrix, read, write, oi, oj)
}

fn view_matrix16_cpu(matrix: Matrix16) -> Matrix16View{
    view_matrix16(matrix, read_matrix16_cpu(matrix), write_matrix16_cpu(matrix))
}

fn view_matrix16(matrix: Matrix16, read: Matrix16ReadFn, write: Matrix16WriteFn) -> Matrix16View{
    view_matrix16_offset(matrix, read, write, 0, 0)
}

fn view_matrix16_offset(matrix: Matrix16, read: Matrix16ReadFn, write: Matrix16WriteFn, oi: Index, oj: Index) -> Matrix16View{
    view_matrix16_coal_offset(matrix, read, write, oi, oj)
}

fn view_matrix8_cpu(matrix: Matrix8) -> Matrix8View{
    view_matrix8(matrix, read_matrix8_cpu(matrix), write_matrix8_cpu(matrix))
}

fn view_matrix8(matrix: Matrix8, read: Matrix8ReadFn, write: Matrix8WriteFn) -> Matrix8View{
    view_matrix8_offset(matrix, read, write, 0, 0)
}

fn view_matrix8_offset(matrix: Matrix8, read: Matrix8ReadFn, write: Matrix8WriteFn, oi: Index, oj: Index) -> Matrix8View{
    view_matrix8_coal_offset(matrix, read, write, oi, oj)
}


// ----------------------------------------------------------------------------
fn matrix_entry_cpu(device_matrix: Matrix, i: Index, j: Index) -> Score32 {
    let temp = alloc_matrix(device_matrix, alloc_cpu);
    copy_matrix(device_matrix, temp);
    let entry = view_matrix_cpu(temp).read(i, j);
    release(temp.buf);
    entry
}

fn vector_entry_cpu(device_vector: Vector, i: Index) -> Score32 {
    let temp = create_vector(1, 0, alloc_cpu);
    copy_vector_offset(device_vector, i, temp, 0, 1);
    let entry = view_vector_cpu(temp).read(0);
    release(temp.buf);
    entry
}

fn vector_cpu(device_vector: Vector) -> Vector {
    let vector_cpu = alloc_vector(device_vector, alloc_cpu);
    copy_vector(device_vector, vector_cpu);
    vector_cpu
}

fn vector_to_device(vector_cpu: Vector, device_vector: Vector) -> () {
    copy_vector(vector_cpu, device_vector);
    release(vector_cpu.buf);
}

fn matrix8_cpu(device_matrix: Matrix8) -> Matrix8 {
       let matrix_cpu = alloc_matrix8(device_matrix, alloc_cpu);
       copy_matrix8(device_matrix, matrix_cpu);
       matrix_cpu

}



// ----------------------------------------------------------------------------
fn traceback_view(block_width: Index, predc: Matrix8, scheme: AlignmentScheme) -> fn(Index, Index, Index, Index, IterContext) -> PredecessorsView{
    |offset_i, offset_j, height, width,  it| -> PredecessorsView{

        let predc_offset_i = offset_i + it.bid_x;
        let pre = view_matrix8_offset(predc, read_matrix8(predc), write_matrix8(predc), predc_offset_i, 0);

        let tid = it.tid_x;

        if tid < width {
            pre.write(-1, tid, scheme.init_predc_cols(tid));
        }
        
        for i in range_step(tid - 1, height, block_width){
            pre.write(i, -1, scheme.init_predc_rows(i));
        }

        PredecessorsView {
            write:     |i, j, val| pre.write(i, j, val),
        }
    }
}

