static BLOCK_WIDTH  = 1024; //TODO 1024
static BLOCK_HEIGHT = 1024; //TODO 1024

struct IterationInfo {
    block_id: Index
}

fn create_iteration_info(block_id: Index) -> IterationInfo {
    IterationInfo{
        block_id: block_id
    }
}

static mut last_non_empty_rank = 0;
static mut first_local_row = 0;
static mut last_local_row = 0; //excl.

fn iteration(query: Sequence, subject: Sequence, scores: ScoringMatrix, predc: PredecessorMatrix, body: RelaxationBody) -> ()
{
    let comm = comm();
    let num_blocks_i = round_up_div(query.length, BLOCK_HEIGHT * comm.size());
    let num_blocks_j = round_up_div(subject.length, BLOCK_WIDTH);
    let mut real_num_blocks_i = 0;
    let max_blocks = min(num_blocks_i, num_blocks_j);
    let block_diags = num_blocks_i + num_blocks_j - 1;

    //calculate rank info
    first_local_row = min(comm.rank() * num_blocks_i * BLOCK_HEIGHT, query.length);
    last_local_row = min(first_local_row + num_blocks_i * BLOCK_HEIGHT, query.length);

    //TODO print mpi info
    print_i32(comm.rank());
    print_string(" has rows ");
    print_i32(first_local_row);
    print_string(" - ");
    print_i32(last_local_row);
    print_string("\n");

    let send_recv_buffer = alloc_cpu(BLOCK_WIDTH * sizeof[int]());
    let send_recv_data = bitcast[&mut[int]](send_recv_buffer.data);

    for benchmark_cpu() {
        for block_dia_i in unroll(0, block_diags){

            //TODO
            //print progress
            if(block_dia_i % 10 == 0) {
                print_string("âŒ› ");
                print_f64((block_dia_i as f64 / block_diags as f64) * 100.0);
                print_string("% (");
                print_i32(block_dia_i);
                print_string("/");
                print_i32(block_diags);
                print_string(") at rank ");
                print_i32(comm.rank());
                print_string("\n");
            }

            let num_blocks = min3(block_dia_i + 1, max_blocks, block_diags - block_dia_i);

            for block_dia_j in parallel(get_thread_count(), 0, num_blocks){

                let block_i = min(block_dia_i, num_blocks_i - 1) - block_dia_j + (comm.rank() * num_blocks_i);
                let block_j = max(block_dia_i - num_blocks_i + 1, 0) + block_dia_j;

                let offset_i = block_i * BLOCK_HEIGHT;
                let offset_j = block_j * BLOCK_WIDTH;

                let height = min(BLOCK_HEIGHT, query.length - offset_i);
                let width  = min(BLOCK_WIDTH, subject.length - offset_j);

                if(height < 1 || width < 1) {
                    continue()
                }

                real_num_blocks_i++;

                //TODO
                //print block info
                /*
                print_string("[ BLOCK ");
                print_i32(block_dia_i);
                print_string(".");
                print_i32(block_dia_j);
                print_string(" - (");
                print_i32(offset_i);
                print_string(",");
                print_i32(offset_j);
                print_string("),(");
                print_i32(height);
                print_string(",");
                print_i32(width);
                print_string(")");
                print_string(" - ");
                print_i32(comm.rank());
                print_string("]\n");
                */

                let que_acc = get_sequence_acc_offset(read_sequence_cpu(query), write_sequence_cpu(query), offset_i);
                let sub_acc = get_sequence_acc_offset(read_sequence_cpu(subject), write_sequence_cpu(subject), offset_j);

                //recv data from other nodes
                if(block_i % num_blocks_i == 0 && block_i > 0) {
                    //TODO
                    /*
                    print_string("POS (");
                    print_i32(offset_i);
                    print_string("|");
                    print_i32(offset_j);
                    print_string(") recvs ");
                    print_i32(width);
                    print_string(" elems from BLOCK (");
                    print_i32(block_i-1);
                    print_string("|");
                    print_i32(block_j);
                    print_string(")\n");
                    */

                    comm.recv(send_recv_data as COMM_MutBuf, width, comm.int_t, comm.rank() - 1, block_j);

                    let sco_acc_old = scores.get_iteration_acc(offset_i - BLOCK_HEIGHT, offset_j, height, width, false, create_iteration_info(block_dia_j));
                    //update last line
                    sco_acc_old.update_begin_line(height - 1);
                    for z in range(0, width) {
                        sco_acc_old.write(height - 1, z, send_recv_data(z));
                    }
                    sco_acc_old.update_end_line(height - 1);
                }

                //TODO
                let sco_acc = scores.get_iteration_acc(offset_i, offset_j, height, width, false, create_iteration_info(block_dia_j));
                let pre_acc = predc.get_iteration_acc(offset_i, offset_j, height, width, create_iteration_info(block_dia_j));

                for i in unroll(0, height){
                    sco_acc.update_begin_line(i);

                    for j in unroll(0, width){
                        body(i, j, que_acc, sub_acc, sco_acc, pre_acc);
                    }

                    sco_acc.update_end_line(i);
                }

                //send data to other nodes
                if(block_i % num_blocks_i == (num_blocks_i - 1) && (comm.rank() < comm.size() - 1)) {
                    //TODO
                    /*
                    print_string("POS (");
                    print_i32(offset_i);
                    print_string("|");
                    print_i32(offset_j);
                    print_string(") sends ");
                    print_i32(width);
                    print_string(" elems to BLOCK (");
                    print_i32(block_i);
                    print_string("|");
                    print_i32(block_j);
                    print_string(")\n");
                    */

                    let vec = scores.get_last_row();
                    let vec_acc = get_vector_acc_cpu(vec);
                    for z in range(0, width) {
                        send_recv_data(z) = vec_acc.read(z + offset_j);
                    }
                    comm.send(send_recv_data as COMM_MutBuf, width, comm.int_t, comm.rank() + 1, block_j);
                }
                sco_acc.block_end();
            }
        }
    }
    release(send_recv_buffer);

    //share how many blocks have been computed at the current node
    let num_blocks_buffer = alloc_cpu(comm.size() * sizeof[int]());
    let num_blocks_data = bitcast[&mut[int]](num_blocks_buffer.data);

    comm.allgather(&real_num_blocks_i as COMM_Buf, num_blocks_data as COMM_MutBuf, 1, comm.int_t);

    let size = comm.size();
    for z in range_rev(comm.size()-1, -1) {
        if(num_blocks_data(z) > 0) {
            last_non_empty_rank = z;
            break()
        }
    }
}

fn iteration_partitioned(half_size: Index, num_halfs: Index, block_width: Index, splits: Splits, max_part_height: Index) -> IterationFn{

    |query, subject, scores, predc, body| {

        //horizontal blocks in each half
        let half_num_blocks_j = half_size / block_width;
        //vertical blocks in each half
        let half_num_blocks_i = round_up_div(max_part_height, BLOCK_HEIGHT);
        //maximum blocks in one antidiagonal of a half
        let half_max_blocks = min(half_num_blocks_i, half_num_blocks_j);
        //number of antidiagonals in a half
        let block_diags = half_num_blocks_i + half_num_blocks_j - 1;

        for benchmark_cpu() {
            for block_dia_i in unroll(0, block_diags){

                let half_num_blocks = min3(block_dia_i + 1, half_max_blocks, block_diags - block_dia_i);

                for block_dia_j in parallel(get_thread_count(), 0, half_num_blocks * num_halfs){

                    let half_index = block_dia_j / half_num_blocks;
                    let is_left_half = half_index % 2 == 0;

                    let half_block_dia_j = block_dia_j % half_num_blocks;
                    let half_block_i = min(block_dia_i, half_num_blocks_i - 1) - half_block_dia_j;
                    let half_block_j = max(block_dia_i - half_num_blocks_i + 1, 0) + half_block_dia_j;

                    let half_offset_j = half_index * half_size;
                    let (half_offset_i, half_height) = splits.get_part_dimensions(half_index / 2);

                    let offset_i = half_offset_i + half_block_i * BLOCK_HEIGHT;
                    let offset_j = half_offset_j + half_block_j * block_width;

                    let half_width = min(half_size, subject.length - half_offset_j);

                    let height = min(BLOCK_HEIGHT, half_height - half_block_i * BLOCK_HEIGHT);
                    let width  = min(block_width, subject.length - offset_j);

                    let que_acc = get_sequence_acc_half(query, half_offset_i, half_height, half_block_i, BLOCK_HEIGHT, is_left_half);
                    let sub_acc = get_sequence_acc_half(subject, half_offset_j, half_width, half_block_j, block_width, is_left_half);

                    if width > 0 {
                        let sco_acc = scores.get_iteration_acc(offset_i, offset_j, height, width, is_left_half, create_iteration_info(block_dia_j));
                        let pre_acc = predc.get_iteration_acc(offset_i, offset_j, height, width, create_iteration_info(block_dia_j));

                        for i in unroll(0, height){
                            sco_acc.update_begin_line(i);

                            for j in unroll(0, width){
                                body(i, j, que_acc, sub_acc, sco_acc, pre_acc);
                            }
                            sco_acc.update_end_line(i);

                        }
                        sco_acc.block_end();
                    }
                }
            }
        }
    }
}

fn iteration_blockwise(block_width: Index, splits: Splits) -> IterationFn {

    |query, subject, scores, predc, body| {

        //number of horizontal blocks
        let num_blocks_j = round_up_div(subject.length, block_width);

        for benchmark_cpu() {

            for block_j in parallel(get_thread_count(), 0, num_blocks_j){

                let offset_j = block_j * block_width;

                let (offset_i, height) = splits.get_part_dimensions(block_j);

                let width = min(block_width, subject.length - offset_j);

                let que_acc = get_sequence_acc_offset(read_sequence_cpu(query), write_sequence_cpu(query), offset_i);
                let sub_acc = get_sequence_acc_offset(read_sequence_cpu(subject), write_sequence_cpu(subject), offset_j);

                let sco_acc = scores.get_iteration_acc(offset_i, offset_j, height, width, false, create_iteration_info(block_j));
                let pre_acc = predc.get_iteration_acc(offset_i, offset_j, height, width, create_iteration_info(block_j));

                for i in unroll(0, height){
                    sco_acc.update_begin_line(i);

                    for j in unroll(0, width){
                        body(i, j, que_acc, sub_acc, sco_acc, pre_acc);
                    }
                    sco_acc.update_end_line(i);

                }
                sco_acc.block_end();
            }
        }
    }
}

fn iteration_tb(predc: MatrixS, splits: Splits, subject_length: Index, block_width: Index, body: fn (MatrixSAcc, Index, Index, Index, Index) -> ()) -> (){

    for block in parallel(get_thread_count(), 0, splits.get_splits_vector().length){

        let (offset_i, height) = splits.get_part_dimensions(block);

        let offset_j = block * block_width;
        let width = min(block_width, subject_length - offset_j);

        let predc_offset_i = offset_i + block;
        let pre_acc = get_matrix_s_acc_offset(predc, read_matrix_s_cpu(predc), write_matrix_s_cpu(predc), predc_offset_i, 0);

        body(pre_acc, offset_i, offset_j, height, width);
    }
}


fn iteration_1d(length: Index, body: fn(Index) -> ()) -> (){
    for i in parallel(get_thread_count(), 0, length){
        body(i);
    }
}

fn iteration_matrix_1d(matrix: Matrix, length: Index, body: fn(Index, MatrixAcc) -> ()) -> (){
    let mat_acc = make_matrix_acc_cpu(matrix);
    for i in iteration_1d(length) { body(i, mat_acc); }
}

fn iteration_matrix_s_1d(matrix: MatrixS, length: Index, body: fn(Index, MatrixSAcc) -> ()) -> (){
    let mat_acc = get_matrix_s_acc_cpu(matrix);
    for i in iteration_1d(length) { body(i, mat_acc); }
}


fn iteration_vector_1d(vector: Vector, length: Index, body: fn(Index, VectorAcc) -> ()) -> (){
    let vec_acc = get_vector_acc_cpu(vector);
    for i in iteration_1d(length){ body(i, vec_acc); }
}


fn iteration_2_vectors_1d(vector_1: Vector, vector_2: Vector, length: Index, body: fn(Index, VectorAcc, VectorAcc) -> ()) -> (){
    let vec_acc_1 = get_vector_acc_cpu(vector_1);
    let vec_acc_2 = get_vector_acc_cpu(vector_2);
    for i in iteration_1d(length) { body(i, vec_acc_1, vec_acc_2); }
}

fn iteration_reduction(vector: Vector, index_vec: Vector, score_vec: Vector, offset: Index, length: Index, body: fn(Score, Score) -> bool) -> (){

    let num_blocks = 64;
    let block_size = round_up_div(length, num_blocks);
    let vec_acc = get_vector_acc_cpu(vector);

    let partial_res = create_vector(num_blocks, 0, alloc_cpu);
    let partial_ind = create_vector(num_blocks, 0, alloc_cpu);
    let par_res_acc = get_vector_acc_cpu(partial_res);
    let par_ind_acc = get_vector_acc_cpu(partial_ind);

    for b in parallel(get_thread_count(), 0, num_blocks){

        let offs = offset + b * block_size;
        let len  = min(block_size, length - b * block_size);

        let mut score = SCORE_MIN_VALUE;
        let mut index = -1;

        // for i in unroll(offs, offs + len){
        for i in unroll(offs, offs + len){
            let v = vec_acc.read(i);
            if body(v, score) {
                score = v;
                index = i;
            }
        }
        par_res_acc.write(b, score);
        par_ind_acc.write(b, index);
    }

    let mut score = par_res_acc.read(0);
    let mut index = par_ind_acc.read(0);

    for i in unroll(1, num_blocks){
        let v = par_res_acc.read(i);
        if body(v, score) {
            score = v;
            index = par_ind_acc.read(i);
        }
    }
    get_vector_acc_cpu(score_vec).write(0, score);
    get_vector_acc_cpu(index_vec).write(0, index);
    release(partial_res.buf);
    release(partial_ind.buf);
}
