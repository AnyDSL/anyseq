struct Scoring {
    get_scoring_matrix:    fn() -> ScoringMatrix,
    get_score:             fn() -> Score,
    get_score_pos:         fn() -> (Index, Index),
    get_left_half_scores:  fn() -> Vector,
    get_right_half_scores: fn() -> Vector,
    release:               fn() -> ()
}

struct ScoringMatrix{
    get_iteration_acc:     fn(Index, Index, Index, Index, bool, IterationInfo) -> ScoringMatrixAcc,
    get_matrix:            fn() -> Matrix,
    get_last_row:          fn() -> Vector,
    get_last_column:       fn() -> Vector,
    get_right_half_column: fn() -> Vector,
    release:               fn() -> ()
}

struct ScoringMatrixAcc {
    read_no_gap:       fn(Index, Index) -> Score,
    read_gap_q:        fn(Index, Index) -> Score,
    read_gap_s:        fn(Index, Index) -> Score,
    write:             fn(Index, Index, Score) -> (),
    update_begin_line: fn(Index) -> (),
    update_end_line:   fn(Index) -> (),
    block_end:         fn() -> ()
}

fn get_global_scoring_linmem(height: Index, width: Index, scheme: AlignmentScheme) -> Scoring{
    print_string(">>>>get_global_scoring_linmem() with create_scoring_matrix_linmem()\n");
    let score_matrix = create_scoring_matrix_linmem(height, width, scheme.init_scores);

    let get_score =     || {
        let mut score = get_vector_entry_cpu(score_matrix.get_last_column(), height - 1);
        let comm = comm();
        comm.broadcast(&mut score as COMM_MutBuf, 1, comm.int_t, last_non_empty_rank);
        score
    };
    let get_score_pos = || (height - 1, width - 1);

    create_scoring(score_matrix, get_score, get_score_pos)
}

fn get_semiglobal_scoring_linmem(height: Index, width: Index, scheme: AlignmentScheme) -> Scoring{
    print_string(">>>>get_semiglobal_scoring_linmem()\n");
    let score_matrix = create_scoring_matrix_linmem(height, width, scheme.init_scores);

    let mut score = SCORE_MIN_VALUE;
    let mut pos   = (-1, -1);

    let find_score = || {

        let last_row    = score_matrix.get_last_row();
        let last_column = score_matrix.get_last_column();
        let comm = comm();

        let (row_score, row_index) = reduce_max(last_row, -1 + first_local_row, last_local_row - first_local_row + 1);

        if row_score > score {
            score = row_score;
            pos = (height - 1, row_index);
        }

        if(comm.rank() == comm.size() - 1) {
            let (col_score, col_index) = reduce_max(last_column, -1, last_column.length + 1);

            if col_score > score {
                score = col_score;
                pos = (col_index, width - 1);
            }
        }

        //exchange score and position
        let temp_pos = alloc_cpu(comm.size() * sizeof[int]());
        let temp_pos_data = bitcast[&mut[int]](temp_pos.data);
        comm.allgather(&score as COMM_Buf, temp_pos_data as COMM_MutBuf, 1, comm.int_t);
        let mut max_score = SCORE_MIN_VALUE;
        let mut max_score_rank = 0;
        for i in range(0, comm.size()) {
            if(temp_pos_data(i) > max_score) {
                max_score = temp_pos_data(i);
                max_score_rank = i;
            }
        }
        comm.broadcast(&mut score as COMM_MutBuf, 1, comm.int_t, max_score_rank);
        release(temp_pos);
    };

    let get_score = || {
        if score == SCORE_MIN_VALUE { find_score() }
        score
    };

    let get_score_pos = || {
        if score == SCORE_MIN_VALUE { find_score() }
        pos
    };

    create_scoring(score_matrix, get_score, get_score_pos)
}

fn get_local_scoring_linmem(height: Index, width: Index, scheme: AlignmentScheme) -> Scoring{
    print_string(">>>>get_local_scoring_linmem()\n");
    let score_matrix = create_scoring_matrix_linmem(height, width, scheme.init_scores);

    let max_scores = create_vector(get_local_max_vector_size_device(width), get_padding_w(), alloc_device);
    let max_pos_i  = alloc_vector(max_scores, alloc_device);
    let max_pos_j  = alloc_vector(max_scores, alloc_device);

    for i, sco_acc in iteration_vector_1d(max_scores, max_scores.length){
        sco_acc.write(i, SCORE_MIN_VALUE);
    }

    let local_score_matrix = ScoringMatrix{
        get_iteration_acc:     get_local_linmem_iteration_acc_device(score_matrix, max_scores, max_pos_i, max_pos_j),
        get_matrix:            score_matrix.get_matrix,
        get_last_row:          score_matrix.get_last_row,
        get_last_column:       score_matrix.get_last_column,
        get_right_half_column: score_matrix.get_last_column,
        release:               score_matrix.release
     };

    let mut score = SCORE_MIN_VALUE;
    let mut pos   = (-1, -1);

    let find_score = || {
        let (sco, index) = reduce_max(max_scores, 0, max_scores.length);

        score = sco;
        let pos_i = get_vector_entry_cpu(max_pos_i, index);
        let pos_j = get_vector_entry_cpu(max_pos_j, index);
        pos = (pos_i, pos_j);
    };

    let get_score = || {
        if score == SCORE_MIN_VALUE { find_score() }
        score
    };

    let get_score_pos = || {
        if score == SCORE_MIN_VALUE { find_score() }
        pos
    };

    let release = || {
        local_score_matrix.release();
        release(max_scores.buf);
        release(max_pos_i.buf);
        release(max_pos_j.buf);
    };

    Scoring{
        get_scoring_matrix:   || local_score_matrix,
        get_score:               get_score,
        get_score_pos:           get_score_pos,
        get_left_half_scores:    local_score_matrix.get_last_column,
        get_right_half_scores:   local_score_matrix.get_right_half_column,
        release:                 release
    }
}

//TODO
/*
fn get_global_scoring_full_matrix(height: Index, width: Index, scheme: AlignmentScheme) -> Scoring{

    let score_matrix = create_scoring_matrix_full(height, width, scheme.init_scores);

    let get_score =     || get_matrix_entry_cpu(score_matrix.get_matrix(), height - 1, width - 1);
    let get_score_pos = || (height - 1, width - 1);

    create_scoring(score_matrix, get_score, get_score_pos)
}
*/

fn get_scoring_hb_linmem(height: Index, width: Index, part_size: Index, block_width: Index, splits: Splits, scheme: AlignmentScheme) -> Scoring{

    let score_matrix = create_scoring_hb_matrix_linmem(height, width, part_size, block_width, splits, scheme.init_scores);
    create_scoring(score_matrix, || SCORE_MIN_VALUE, || (-1, -1))
}

fn get_scoring_hb_blockwise_linmem(block_width: Index, scheme: AlignmentScheme) -> Scoring {

    let score_matrix = create_scoring_tb_matrix(scheme.init_scores, block_width);
    create_scoring(score_matrix, || SCORE_MIN_VALUE, || (-1, -1))

}


fn create_scoring(score_matrix: ScoringMatrix, get_score: fn() -> Score, get_score_pos: fn() -> (Index, Index)) -> Scoring{
    Scoring{
        get_scoring_matrix:   || score_matrix,
        get_score:               get_score,
        get_score_pos:           get_score_pos,
        get_left_half_scores:    score_matrix.get_last_column,
        get_right_half_scores:   score_matrix.get_right_half_column,
        release:                 score_matrix.release
    }
}

//TODO
/*
fn create_scoring_matrix_full(height: Index, width: Index, init_scores: InitScoresFn) -> ScoringMatrix{

    let matrix = create_matrix(height, width, get_padding_h(), get_padding_w(), alloc_device);

    //initialize matrix
    for i, mat_acc in iteration_matrix_1d(matrix, matrix.height + 1){ mat_acc.write(i-1,  -1, init_scores(i-1)); }
    for i, mat_acc in iteration_matrix_1d(matrix, matrix.width  + 1){ mat_acc.write( -1, i-1, init_scores(i-1)); }

    let get_iteration_acc = |offset_i: Index, offset_j: Index, _: Index, _: Index, _: bool, it: IterationInfo| -> ScoringMatrixAcc{

        let mat_acc = make_matrix_acc_offset(matrix, read_matrix(matrix), write_matrix(matrix), offset_i, offset_j);

        ScoringMatrixAcc{
            read_no_gap:       |i, j| mat_acc.read(i-1, j-1),
            read_gap_q:        |i, j| mat_acc.read(i  , j-1),
            read_gap_s:        |i, j| mat_acc.read(i-1, j  ),
            write:             |i, j, val| mat_acc.write(i, j, val),
            update_begin_line: |_| {},
            update_end_line:   |_| {},
            block_end:         || {}
        }
    };

    let get_last_column = || -> Vector{
        let col = create_vector(matrix.height, get_padding_w(), alloc_device);
        col
    };

    let release = || -> () {
        release(matrix.buf);
    };

    ScoringMatrix{
        get_iteration_acc:       get_iteration_acc,
        get_matrix:           || matrix,
        get_last_row:            get_last_column,
        get_last_column:         get_last_column,
        get_right_half_column:   get_last_column,
        release:                 release
    }

}
*/

fn create_scoring_matrix_linmem(height: Index, width: Index, init_scores: InitScoresFn) -> ScoringMatrix{

    let column  = create_vector(height, get_padding_h(), alloc_device);
    let row     = create_vector(width, get_padding_w(), alloc_device);
    let corners = create_vector(round_up_div(width, BLOCK_WIDTH) - 1, get_padding_w(), alloc_device);

    for i, col_acc in iteration_vector_1d(column, column.length + 1){
        if i == 0 {
            col_acc.write(-1, init_scores(width - 1));
        }else{
            col_acc.write(i-1, init_scores(i-1));
        }
    }

    for i, row_acc in iteration_vector_1d(row, row.length + 1){
        if i == 0 {
            row_acc.write(-1, init_scores(height - 1));
        }else{
            row_acc.write(i-1, init_scores(i-1));
        }
    }

    for i, cor_acc in iteration_vector_1d(corners, corners.length + 1){
        cor_acc.write(i-1, init_scores(i * BLOCK_WIDTH - 1));
    }

    let release = || -> () {
        release(column.buf);
        release(row.buf);
        release(corners.buf);
    };

    ScoringMatrix{
        get_iteration_acc:        get_linmem_iteration_acc_device(column, row, corners),
        get_matrix:            || create_matrix(0, 0, 0, 0, alloc_device), //not supported with linmem matrix
        get_last_row:          || row,
        get_last_column:       || column,
        get_right_half_column: || column,
        release:                  release
    }

}

fn create_scoring_hb_matrix_linmem(height: Index, width: Index, part_size: Index, block_width: Index, splits: Splits, init_scores: InitScoresFn) -> ScoringMatrix{

    let num_blocks_j = round_up_div(width, block_width);

    let column_left  = create_vector(height, get_padding_h(), alloc_device);
    let column_right = create_vector(height, get_padding_h(), alloc_device);
    let row          = create_vector(width, get_padding_w(), alloc_device);
    let corners      = create_vector(num_blocks_j - 1, get_padding_w(), alloc_device);

    let blocks_per_part = part_size / block_width;

    for b in iteration_1d(num_blocks_j){
        if b < num_blocks_j {

            let col_lef_acc = get_vector_acc(read_vector(column_left), write_vector(column_left));
            let col_rig_acc = get_vector_acc(read_vector(column_right), write_vector(column_right));

            let part  = b / blocks_per_part;
            let block = b % blocks_per_part;

            let (offset_i, part_height) = splits.get_part_dimensions(part);

            let part_blocks = min(blocks_per_part, num_blocks_j - part * blocks_per_part);
            for i in range_step(block, part_height, part_blocks){
                col_lef_acc.write(offset_i + i, init_scores(i));
                col_rig_acc.write(offset_i + i, init_scores(i));
            }
        }
    }

    let half_size = part_size / 2;

    for i, row_acc in iteration_vector_1d(row, row.length){
        row_acc.write(i, init_scores(i % half_size));
    }

    for i, cor_acc in iteration_vector_1d(corners, corners.length + 1){
        cor_acc.write(i-1, init_scores((i * block_width) % half_size - 1));
    }

    let release = || -> () {
        release(column_left.buf);
        release(column_right.buf);
        release(row.buf);
        release(corners.buf);
    };

    ScoringMatrix{
        get_iteration_acc:        get_iteration_acc_hb_device(column_left, column_right, row, corners, block_width),
        get_matrix:            || create_matrix(0, 0, 0, 0, alloc_device), //not supported with linmem matrix
        get_last_row:          || row,
        get_last_column:       || column_left,
        get_right_half_column: || column_right,
        release:                  release
    }

}

fn create_scoring_tb_matrix(init_scores: InitScoresFn, block_width: Index) -> ScoringMatrix{
    ScoringMatrix{
        get_iteration_acc:        get_iteration_acc_tb_device(block_width, init_scores),
        get_matrix:            || create_matrix(0, 0, 0, 0, alloc_device), //not supported
        get_last_row:          || create_vector(0, 0, alloc_device),       //not supported
        get_last_column:       || create_vector(0, 0, alloc_device),       //not supported
        get_right_half_column: || create_vector(0, 0, alloc_device),       //not supported
        release:               || {}
    }
}
