// ----------------------------------------------------------------------------
struct Scoring {
    matrix:            fn() -> Scores,
    score:             fn() -> Score,
    score_pos:         fn() -> IndexPair,
    left_half_scores:  fn() -> Vector,
    right_half_scores: fn() -> Vector,
    release:           fn() -> ()
}

struct Scores {
    iter_view:      fn(Index, Index, Index, Index, bool, IterContext) -> ScoresView,
    matrix:         fn() -> Matrix,
    last_row:       fn() -> Vector,
    last_col:       fn() -> Vector,
    right_half_col: fn() -> Vector,
    release:        fn() -> ()
}

struct ScoresView {
    read_no_gap:       fn(Index, Index) -> Score,
    read_gap_q:        fn(Index, Index) -> Score,
    read_gap_s:        fn(Index, Index) -> Score,
    write:             fn(Index, Index, Score) -> (),
    update_begin_line: fn(Index) -> (),
    update_end_line:   fn(Index) -> (),
    block_end:         fn() -> ()
}


// ----------------------------------------------------------------------------
fn global_scoring_linmem(height: Index, width: Index, 
                         scheme: AlignmentScheme) -> Scoring
{

    let smat = scoring_matrix_linmem(height, width, scheme.init_scores);

    let get_score =     || vector_entry_cpu(smat.last_col(), height - 1);
    let get_score_pos = || (height - 1, width - 1);

    scoring(smat, get_score, get_score_pos)
}


// ----------------------------------------------------------------------------
fn semiglobal_scoring_linmem(height: Index, width: Index, 
                             scheme: AlignmentScheme) -> Scoring
{
    let smat = scoring_matrix_linmem(height, width, scheme.init_scores);

    let mut score = SCORE_MIN_VALUE;
    let mut pos   = (-1, -1);
    
    let find_score = || {
        
        let last_row    = smat.last_row();
        let last_column = smat.last_col();
        
        let (row_score, row_index) = reduce_max(last_row, -1, last_row.length + 1);

        if row_score > score {
            score = row_score;
            pos = (height - 1, row_index);
        }

        let (col_score, col_index) = reduce_max(last_column, -1, last_column.length + 1);

        if col_score > score {
            score = col_score;
            pos = (col_index, width - 1);
        }
    };

    let get_score = || {
        if score == SCORE_MIN_VALUE { find_score() }
        score
    };

    let get_score_pos = || {
        if score == SCORE_MIN_VALUE { find_score() }
        pos
    };

    scoring(smat, get_score, get_score_pos)
}


// ----------------------------------------------------------------------------
fn local_scoring_linmem(height: Index, width: Index,
                        scheme: AlignmentScheme) -> Scoring 
{
    let smat = scoring_matrix_linmem(height, width, scheme.init_scores);
    
    let max_scores = create_vector(local_max_vector_size_device(width), padding_w(), alloc_device);
    let max_pos_i  = alloc_vector(max_scores, alloc_device);
    let max_pos_j  = alloc_vector(max_scores, alloc_device);

    for i, sco in iteration_vector_1d(max_scores, max_scores.length) {
        sco.write(i, SCORE_MIN_VALUE);
    }

    let local_score_matrix = Scores {
        iter_view:      local_linmem_iter_view_device(smat, max_scores, max_pos_i, max_pos_j),
        matrix:         smat.matrix,
        last_row:       smat.last_row,
        last_col:       smat.last_col,
        right_half_col: smat.last_col,
        release:        smat.release
     };

    let mut score = SCORE_MIN_VALUE;
    let mut pos   = (-1, -1);

    let find_score = || {   
        let (sco, index) = reduce_max(max_scores, 0, max_scores.length);

        score = sco;
        let pos_i = vector_entry_cpu(max_pos_i, index);
        let pos_j = vector_entry_cpu(max_pos_j, index);
        pos = (pos_i, pos_j);
    };

    let get_score = || {
        if score == SCORE_MIN_VALUE { find_score() }
        score
    };

    let get_score_pos = || {
        if score == SCORE_MIN_VALUE { find_score() }
        pos
    };

    let release = || {
        local_score_matrix.release();
        release(max_scores.buf);
        release(max_pos_i.buf);
        release(max_pos_j.buf);
    };

    Scoring{
        matrix:             || local_score_matrix,
        score:              get_score,
        score_pos:          get_score_pos,
        left_half_scores:   local_score_matrix.last_col,
        right_half_scores:  local_score_matrix.right_half_col,
        release:            release
    }
}




// ----------------------------------------------------------------------------
// not to be used directly
// ----------------------------------------------------------------------------
fn scoring(smat: Scores, 
           get_score: fn() -> Score, 
           get_score_pos: fn() -> IndexPair) -> Scoring
{
    Scoring {
        matrix:             || smat,
        score:              get_score,
        score_pos:          get_score_pos,
        left_half_scores:   smat.last_col,
        right_half_scores:  smat.right_half_col,
        release:            smat.release
    }
}


// ----------------------------------------------------------------------------
fn full_scoring_matrix(height: Index, width: Index, 
                       scheme: AlignmentScheme) -> Scoring
{
    let smat = scoring_matrix_full(height, width, scheme.init_scores);
    
    let get_score =     || matrix_entry_cpu(smat.matrix(), height - 1, width - 1);
    let get_score_pos = || (height - 1, width - 1);

    scoring(smat, get_score, get_score_pos)
}


// ----------------------------------------------------------------------------
fn scoring_linmem_tb(height: Index, width: Index, 
                     part_size: Index, block_width: 
                     Index, splits: Splits, 
                     scheme: AlignmentScheme) -> Scoring
{
    let smat = scoring_matrix_linmem_tb(height, width, part_size, 
                                        block_width, splits, 
                                        scheme.init_scores);

    scoring(smat, || SCORE_MIN_VALUE, || (-1, -1))
}


// ----------------------------------------------------------------------------
fn scoring_linmem_tb_blockwise(block_width: Index, 
                               scheme: AlignmentScheme) -> Scoring 
{
    let smat = scoring_matrix_linmem_tb_blockwise(scheme.init_scores, block_width);

    scoring(smat, || SCORE_MIN_VALUE, || (-1, -1))
}




// ----------------------------------------------------------------------------
fn scoring_matrix_full(height: Index, width: Index, init_scores: InitScoresFn) -> Scores 
{
    let smat = create_matrix(height, width, padding_h(), padding_w(), alloc_device);

    // initialize scoring matrix
    for i, m in iteration_matrix_1d(smat, smat.height + 1){ 
        m.write(i-1,  -1, init_scores(i-1)); 
    }
    for i, m in iteration_matrix_1d(smat, smat.width  + 1){ 
        m.write( -1, i-1, init_scores(i-1)); 
    }

    let iter_view = |offset_i: Index, offset_j: Index, _: Index, _: Index, _: bool, it: IterContext| 
        -> ScoresView
    {
        let m = view_matrix_offset(smat, read_matrix(smat), write_matrix(smat), offset_i, offset_j);

        ScoresView {
            read_no_gap:        |i, j| m.read(i-1, j-1),
            read_gap_q:         |i, j| m.read(i  , j-1),
            read_gap_s:         |i, j| m.read(i-1, j  ),
            write:              |i, j, val| m.write(i, j, val),
            update_begin_line:  |_| {},
            update_end_line:    |_| {},
            block_end:          || {}
        }
    };

    let last_col = || -> Vector {
        let col = create_vector(smat.height, padding_w(), alloc_device);
        col
    };

    let release = || -> () {
        release(smat.buf);
    };

    Scores {
        iter_view:       iter_view,
        matrix:          || smat,
        last_row:        last_col,
        last_col:        last_col,
        right_half_col:  last_col,
        release:         release
    }

}


// ----------------------------------------------------------------------------
fn scoring_matrix_linmem(height: Index, width: Index, init_scores: InitScoresFn) 
    -> Scores
{
    let column  = create_vector(height, padding_h(), alloc_device);
    let row     = create_vector(width, padding_w(), alloc_device);
    let corners = create_vector(ceil_div(width, BLOCK_WIDTH) - 1, padding_w(), alloc_device);

    for i, c in iteration_vector_1d(column, column.length + 1){
        if i == 0 {
            c.write(-1, init_scores(width - 1));
        }else{
            c.write(i-1, init_scores(i-1));
        }
    }

    for i, r in iteration_vector_1d(row, row.length + 1){
        if i == 0 {
            r.write(-1, init_scores(height - 1)); 
        }else{
            r.write(i-1, init_scores(i-1));
        }
    }

    for i, cor in iteration_vector_1d(corners, corners.length + 1){
        cor.write(i-1, init_scores(i * BLOCK_WIDTH - 1));
    }

    let release = || -> () {
        release(column.buf);
        release(row.buf);
        release(corners.buf);
    };

    Scores {
        iter_view:       linmem_iter_view_device(column, row, corners),
        matrix:          || create_matrix(0, 0, 0, 0, alloc_device), // not supported with linmem matrix
        last_row:        || row,
        last_col:        || column,
        right_half_col:  || column,
        release:         release    
    }

}


// ----------------------------------------------------------------------------
fn scoring_matrix_linmem_tb(height: Index, width: Index, 
                            part_size: Index, block_width: Index, 
                            splits: Splits, 
                            init_scores: InitScoresFn) -> Scores
{
    let num_blocks_j = ceil_div(width, block_width);

    let col_left  = create_vector(height, padding_h(), alloc_device);
    let col_right = create_vector(height, padding_h(), alloc_device);
    let row       = create_vector(width, padding_w(), alloc_device);
    let corners   = create_vector(num_blocks_j - 1, padding_w(), alloc_device);

    let blocks_per_part = part_size / block_width;

    for b in iteration_1d(num_blocks_j) {
        if b < num_blocks_j {
            let lcol = view_vector(read_vector(col_left), write_vector(col_left));
            let rcol = view_vector(read_vector(col_right), write_vector(col_right));

            let part  = b / blocks_per_part;
            let block = b % blocks_per_part;

            let (offset_i, part_height) = splits.part_dimensions(part);

            let part_blocks = min(blocks_per_part, num_blocks_j - part * blocks_per_part);
            for i in range_step(block, part_height, part_blocks){
                lcol.write(offset_i + i, init_scores(i));
                rcol.write(offset_i + i, init_scores(i));
            }
        }
    }

    let half_size = part_size / 2;

    for i, r in iteration_vector_1d(row, row.length){
        r.write(i, init_scores(i % half_size));
    }

    for i, cor in iteration_vector_1d(corners, corners.length + 1){
        cor.write(i-1, init_scores((i * block_width) % half_size - 1));
    }

    let release = || -> () {
        release(col_left.buf);
        release(col_right.buf);
        release(row.buf);
        release(corners.buf);
    };

    Scores {
        iter_view:       iter_view_hb_device(col_left, col_right, row, corners, block_width),
        matrix:          || create_matrix(0, 0, 0, 0, alloc_device), // not supported with linmem matrix
        last_row:        || row,
        last_col:        || col_left,
        right_half_col:  || col_right,
        release:         release
    }

}


// ----------------------------------------------------------------------------
fn scoring_matrix_linmem_tb_blockwise(init_scores: InitScoresFn, block_width: Index) -> Scores{
    Scores {
        iter_view:       iter_view_tb_device(block_width, init_scores),
        matrix:          || create_matrix(0, 0, 0, 0, alloc_device), // not supported
        last_row:        || create_vector(0, 0, alloc_device),       // not supported
        last_col:        || create_vector(0, 0, alloc_device),       // not supported
        right_half_col:  || create_vector(0, 0, alloc_device),       // not supported
        release:         || {}
    }
}

